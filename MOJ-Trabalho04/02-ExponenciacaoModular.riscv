.data
	print_primo1: .string "A exponencial modular "
	print_primo2: .string " elevado a "
	print_primo3: .string " (mod "
	print_primo4: .string ") eh "
	endl: .string ".\n"
	print_nao_primo: .string "O modulo nao eh primo.\n"
	print_nao_valido: .string "Entradas invalidas.\n"

.text
	main:
		li a7, 5
		ecall
		mv s1, a0
		li a7, 5
		ecall
		mv s2, a0
		li a7, 5
		ecall
		mv s3, a0
		addi t0, zero, 1
		blt s1, t0, invalido
		blt s2, t0, invalido
		blt s3, t0, invalido		
		addi t0, zero, 1
		add t1, zero, zero
	laco:
		bgt t0, s3, elevar
		rem t3, s3, t0
		beqz t3, adiciona_1
		addi t0, t0, 1
		j laco
	elevar:
		addi t3, zero, 2
		beq t1, t3, print_valido
		j imprimir_nao_primo
	
	print_valido:
		li a7, 4
		la a0, print_primo1
		ecall
		
		li a7, 1
		mv a0, s1
		ecall
		
		li a7, 4
		la a0, print_primo2
		ecall
		
		li a7, 1
		mv a0, s2
		ecall
		
		li a7, 4
		la a0, print_primo3
		ecall
		
		li a7, 1
		mv a0, s3
		ecall
		
		li a7, 4
		la, a0, print_primo4
		ecall
		
		add s4, zero, zero
		
		remu s1, s1, s3
		
		beq s1, zero, imprime_resposta
		addi s4, zero 1
		
	resposta:
		beqz s2, imprime_resposta
		blt s2, zero, imprime_resposta
		andi t0, s2, 0x00000001
		addi t1, zero, 1
		beq t0, t1, atualiza
		srli s2, s2, 1
		mul s1, s1, s1
		remu s1, s1, s3
		j resposta
		
	atualiza:
		mul s4, s4, s1
		remu s4, s4 s3
		srli s2, s2, 1
		mul s1, s1, s1
		remu s1, s1, s3
		j resposta
				
	imprime_resposta:
		li a7, 1
		mv a0, s4
		ecall
		
		li a7, 4
		la a0, endl
		ecall
		
		li a7, 10
		ecall
		
	imprimir_nao_primo:
		li a7, 4
		la a0, print_nao_primo
		ecall
		
		li a7, 10
		ecall

	adiciona_1:
		addi t1, t1, 1
		addi t0, t0, 1
		j laco
				
	invalido:
		li a7, 4
		la a0, print_nao_valido
		ecall
		
		li a7, 10
		ecall
